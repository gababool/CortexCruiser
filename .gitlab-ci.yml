# Copyright (C) 2025  Christian Berger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: docker:20.10.14

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  semver_pattern: '/^v([0-9]+)\.([0-9]+)\.([0-9]+)?$/'

#services:
# - name: docker:20.10.14-dind

stages:
  # - build
  - test
  - deploy

# Display information before we start the build.
#before_script:
 # - docker info
  #- echo $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD $CI_REGISTRY
  #- docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# This section describes what shall be done to build and test the project.
#build:
#  tags:
#    - docker-build
#  stage: build
#  script:
#    - cd cpp-opencv/
#    - docker build -f Dockerfile . 

test-coverage:
  tags:
    - docker-build
  image: ubuntu:18.04
  stage: test
  before_script: []  
  script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y cmake g++ make lcov git perl gzip ca-certificates build-essential libopencv-dev libopencv-core3.2 libopencv-highgui3.2 libopencv-imgproc3.2
    #- apk add --no-cache cmake g++ make lcov git perl gzip libopencv-dev
    - cd cpp-opencv/
    - mkdir -p build && cd build
    - cmake -DCODE_COVERAGE=ON ..
    - cmake --build . --target generate-cluon-msc
    - cmake --build . --target generate-opendlv-header
    - make
    - ctest 
    - lcov --capture --directory . --output-file coverage.info
    - lcov --remove coverage.info '/usr/*' '*/Â´test-template.cpp' '*/catch.hpp' --output-file coverage_filtered.info
    - mkdir -p coverage-report
    - genhtml coverage_filtered.info --output-directory coverage-report
    - lcov --list coverage.info
  artifacts:
    paths:
      - cpp-opencv/src/build/coverage-report
    expire_in: 2 months 
  coverage: '/^\s*lines.*:\s*([\d.]+)%/'



# This section describes what shall be done to deploy artefacts from the project.
release:
  tags:
    - docker-build
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG =~ $semver_pattern'
      when: always
  script:
    - cd cpp-opencv/
    - docker build -f Dockerfile -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" .
    - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG"